(define calc-parser
  (lr-driver
    '#(((*default* *error*)
        (error 6)
        (ID 5)
        (NUM 4)
        (LPAREN 3)
        (NEWLINE 2)
        (- 1))
       ((*default* *error*)
        (ID 11)
        (NUM 4)
        (LPAREN 3)
        (- 1))
       ((*default* -6))
       ((*default* *error*)
        (ID 11)
        (NUM 4)
        (LPAREN 3)
        (- 1))
       ((*default* -16))
       ((*default* -14) (= 15) (LPAREN 14))
       ((*default* *error*) (NEWLINE 16))
       ((*default* *error*)
        (NEWLINE 21)
        (+ 20)
        (- 19)
        (* 18)
        (/ 17))
       ((*default* *error*) (NEWLINE 22))
       ((*default* -3))
       ((*default* *error*)
        (*eoi* 23)
        (error 6)
        (ID 5)
        (NUM 4)
        (LPAREN 3)
        (NEWLINE 2)
        (- 1))
       ((*default* -14) (LPAREN 14))
       ((*default* -13) (/ 17) (* 18))
       ((*default* *error*)
        (RPAREN 25)
        (+ 20)
        (- 19)
        (* 18)
        (/ 17))
       ((*default* -18)
        (ID 11)
        (NUM 4)
        (LPAREN 3)
        (- 1))
       ((*default* *error*)
        (ID 11)
        (NUM 4)
        (LPAREN 3)
        (- 1))
       ((*default* -7))
       ((*default* *error*)
        (ID 11)
        (NUM 4)
        (LPAREN 3)
        (- 1))
       ((*default* *error*)
        (ID 11)
        (NUM 4)
        (LPAREN 3)
        (- 1))
       ((*default* *error*)
        (ID 11)
        (NUM 4)
        (LPAREN 3)
        (- 1))
       ((*default* *error*)
        (ID 11)
        (NUM 4)
        (LPAREN 3)
        (- 1))
       ((*default* -5))
       ((*default* -4))
       ((*default* -1) (*eoi* accept))
       ((*default* -2))
       ((*default* -17))
       ((*default* *error*) (RPAREN 33))
       ((*default* -21)
        (COMMA 34)
        (+ 20)
        (- 19)
        (* 18)
        (/ 17))
       ((*default* -8) (+ 20) (- 19) (* 18) (/ 17))
       ((*default* -12))
       ((*default* -11))
       ((*default* -10) (/ 17) (* 18))
       ((*default* -9) (/ 17) (* 18))
       ((*default* -15))
       ((*default* *error*)
        (ID 11)
        (NUM 4)
        (LPAREN 3)
        (- 1))
       ((*default* -19))
       ((*default* -21)
        (COMMA 34)
        (+ 20)
        (- 19)
        (* 18)
        (/ 17))
       ((*default* -20)))
    (vector
      '((4 . 7) (3 . 8) (2 . 9) (1 . 10))
      '((4 . 12))
      '()
      '((4 . 13))
      '()
      '()
      '()
      '()
      '()
      '()
      '((4 . 7) (3 . 8) (2 . 24))
      '()
      '()
      '()
      '((5 . 26) (4 . 27))
      '((4 . 28))
      '()
      '((4 . 29))
      '((4 . 30))
      '((4 . 31))
      '((4 . 32))
      '()
      '()
      '()
      '()
      '()
      '()
      '((6 . 35))
      '()
      '()
      '()
      '()
      '()
      '()
      '((4 . 36))
      '()
      '((6 . 37))
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            2
            1
            (display-result $2)
            (vector-ref ___stack (- ___sp 2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            1
            1
            (display-result $1)
            (vector-ref ___stack (- ___sp 1)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            2
            2
            $1
            (vector-ref ___stack (- ___sp 2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            2
            2
            $1
            (vector-ref ___stack (- ___sp 2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ()
          (___push
            1
            2
            #f
            (vector-ref ___stack (- ___sp 1)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ()
          (___push
            2
            2
            #f
            (vector-ref ___stack (- ___sp 2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($3 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@3 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 5)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            3
            3
            (add-binding $1 $3)
            (vector-ref ___stack (- ___sp 3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($3 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@3 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 5)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            3
            4
            (+ $1 $3)
            (vector-ref ___stack (- ___sp 3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($3 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@3 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 5)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            3
            4
            (- $1 $3)
            (vector-ref ___stack (- ___sp 3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($3 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@3 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 5)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            3
            4
            (* $1 $3)
            (vector-ref ___stack (- ___sp 3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($3 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@3 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 5)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            3
            4
            (/ $1 $3)
            (vector-ref ___stack (- ___sp 3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            2
            4
            (- $2)
            (vector-ref ___stack (- ___sp 2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            1
            4
            (get-binding $1)
            (vector-ref ___stack (- ___sp 1)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($4 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@4 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($3 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@3 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 5)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 7)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            4
            4
            (invoke-proc $1 $3)
            (vector-ref ___stack (- ___sp 4)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            1
            4
            $1
            (vector-ref ___stack (- ___sp 1)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($3 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@3 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 5)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            3
            4
            $2
            (vector-ref ___stack (- ___sp 3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ()
          (___push
            0
            5
            '()
            (vector-ref ___stack (- ___sp 0)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            2
            5
            (cons $1 $2)
            (vector-ref ___stack (- ___sp 2)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ((tok (vector-ref ___stack (- ___sp 1)))
               ($3 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@3 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 3)))
               ($2 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@2 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok))
               (tok (vector-ref ___stack (- ___sp 5)))
               ($1 (if (lexical-token? tok)
                     (lexical-token-value tok)
                     tok))
               (@1 (if (lexical-token? tok)
                     (lexical-token-source tok)
                     tok)))
          (___push
            3
            6
            (cons $2 $3)
            (vector-ref ___stack (- ___sp 3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* ()
          (___push
            0
            6
            '()
            (vector-ref ___stack (- ___sp 0))))))))

